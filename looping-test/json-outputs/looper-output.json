["import { storiesOf } from '@storybook/html';\n\nimport markdown from './readme.md';\n\nstoriesOf('App', module)\n    .add('about', () => {\n        let about = document.createElement('yoo-about');\n        about.logo = './assets/logo/operations_simple.svg';\n        about.version = '1.0.0';\n        about.app = 'My App';\n        return about;\n    }, { notes: { markdown }  })\n    .add('about', () => `<yoo-about logo=\"./assets/logo/operations_simple.svg\" version=\"1.0.0\" app=\"YOBI Design System\" ></yoo-about>`\n        , { notes: { markdown } });\n","import { Component, Element, Prop, ComponentInterface } from '@stencil/core';\nimport { getGrade, translate, getDeviceType, getOS } from '../../../index'; //'../../../../stencil';\n\n@Component({\n    tag: 'yoo-about',\n    styleUrl: 'about.scss',\n    shadow: true\n})\nexport class YooAboutComponent implements ComponentInterface {\n    @Prop() logo: string;\n    @Prop() app: string;\n    @Prop() version: string;\n    @Prop() twitter: string;\n    @Prop() linkedin: string;\n\n    @Element() host: HTMLStencilElement;\n\n    render(): JSX.Element {\n        return (\n            <div class=\"outer-container\">\n                <div class=\"content\">\n                    <img src={this.logo} height=\"51.8\" alt=\"YOOBIC Logo\" />\n                    <div class=\"informations\">\n                        <div class=\"information\">\n                            {this.app} {this.version}\n                        </div>\n                        <div class=\"information\">\n                            Â© 2014 - {new Date().getFullYear()} Yoobic Ltd.\n                        </div>\n                        <div class=\"information\">\n                            {translate('DEVICE') + ': '} {translate('GRADE') + ' ' + getGrade() + ' - '} {getDeviceType() + ' - '} {getOS()}\n                        </div>\n                    </div>\n                    <div class=\"links-container\">\n                        {this.twitter ? <a href={this.twitter} target=\"_blank\"><yoo-icon class=\"yo-twitter\"></yoo-icon></a> : null}\n                        {this.linkedin ? <a href={this.linkedin} target=\"_blank\"><yoo-icon class=\"yo-linkedin\"></yoo-icon></a> : null}\n                    </div>\n                </div>\n                <div class=\"footer\">\n                    <div class=\"powered-by\">\n                        {translate('POWEREDBY')}\n                        <div class=\"powered-img\">\n                            <img src=\"./assets/logo/yoobic_simple.svg\" height=\"12.8\" />\n                        </div>\n                        <div class=\"yoobic-text\">\n                            YOOBIC\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n","import { storiesOf } from '@storybook/html';\n\nimport markdown from './readme.md';\n\nstoriesOf('App', module)\n    .add('login', () => {\n        let login = document.createElement('yoo-login');\n        login.leftPanelMobileHeaderIcon = './assets/logo/operations_simple.svg';\n        login.leftPanelWebHeaderIcon = './assets/logo/operations_landscape_light.svg';\n        login.buttonClass = 'success';\n        login.webTitleText = 'Welcome';\n        login.webLoginFormTitle = 'Welcome';\n        login.webLoginFormSubtitle = 'Please log in'\n        return login;\n    }, { notes: { markdown } })\n    .add('login - HTML', () => `<yoo-login \n    left-panel-mobile-header-icon=\"./assets/logo/operations_simple.svg\"\n    left-panel-web-header-icon=\"./assets/logo/operations_landscape_light.svg\"\n    button-class=\"success\"\n    web-title-text=\"Welcome\"\n    web-login-form-title=\"Welcome\"\n    web-login-form-subtitle=\"Please log in\"\n    ></yoo-login>`);","import { Component, Prop } from \"@stencil/core\";\n\n@Component({\n    tag: 'yoo-hello-component',\n    shadow: true\n})\nexport class HelloComponent {\n\n    /**\n   * The first name\n   */\n    @Prop() personName: string;\n\n    render() {\n        return <div>Hello { this.personName }!</div>\n    }\n}","import { Component, Prop } from '@stencil/core';\nimport { format } from '../../utils/utils';\n\n@Component({\n  tag: 'yoo-my-component',\n  styleUrl: 'my-component.css',\n  shadow: true\n})\nexport class MyComponent {\n  /**\n   * The first name\n   */\n  @Prop() first: string;\n\n  /**\n   * The middle name\n   */\n  @Prop() middle: string;\n\n  /**\n   * The last name\n   */\n  @Prop() last: string;\n\n  private getText(): string {\n    return format(this.first, this.middle, this.last);\n  }\n\n  render() {\n    return <div>Hello, World! I'm {this.getText()}</div>;\n  }\n}\n","import { storiesOf } from '@storybook/html';\n\nstoriesOf('Form', module)\n    .add('form-checkbox', () => `\n            <yoo-my-component first=\"ben\" middle=\"john\" last=\"akehurst\">\n            </yoo-my-component>\n        `);","import { Component, Element, State, Prop, Event, EventEmitter, Watch, Method } from '@stencil/core';\n\nimport {\n    ILanguage, ILoginDetails, getElementDimensions, showActionSheet, showModal, translate, isCordova, isIonic, isIphoneX, isIOS, isTablet,\n    disableKeyboardResize, LoginFocusAnimation, enableKeyboardResize, querySelectorAllDeep, isAndroid, isIphone5, isIphoneSE, isDarkTheme, isWeb, CssClassMap, isSafari, debounce, querySelectorDeep\n} from '../../../index';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { getAppContext } from '../../../utils';\n\nconst MIN_SCREEN_SIZE_LEFT_PANEL = 900;\nconst IPAD_MINI_SCREEN_HEIGHT = 1024;\nconst MINIMUM_SCREEN_SIZE_TO_SHOW_HEADER = 665;\ndeclare var Keyboard: any;\n\n@Component({\n    tag: 'yoo-login',\n    styleUrl: 'login.scss',\n    shadow: true\n})\nexport class YooLoginComponent {\n\n    @Prop() leftPanelMobileHeaderIcon: string = './assets/logo/operations_simple.svg';\n    @Prop() leftPanelWebHeaderIcon: string = './assets/logo/operations_landscape_light.svg';\n    @Prop() videoBackgroundUrl: string = '';\n    @Prop({ mutable: true }) videoHeaderIcon: string;\n    @Prop() backgroundSrc: string;\n    @Prop() backgroundColor: string = 'dark';\n    @Prop() buttonClass: string;\n    @Prop({ mutable: true }) error: string;\n    @Prop() loading: boolean;\n    @Prop() leftPanelFooterText: string = 'POWEREDBY';\n    @Prop() webTitleText: string = 'Operations';\n    @Prop() webSubtitleText: string[] = [];\n    @Prop() webLoginFormTitle: string = '';\n    @Prop() webLoginFormSubtitle: string = 'LOGINSUBTITLE';\n    @Prop() rememberMeText: string = 'REMEMBERME';\n    @Prop() forgotPasswordText: string = 'HELP';\n    @Prop() languages: ILanguage[];\n    @Prop() currentLanguage: string;\n    @Prop() emailLabel: string = 'EMAIL';\n    @Prop() passwordLabel: string = 'PASSWORD';\n    @Prop() borderClass: string = 'success';\n    @Prop() magicLinkButtonText: string = 'MAGICLINK';\n    @Prop() resetPasswordButtonText: string = 'RESETPASSWORD';\n    @Prop() loginButtonText: string = 'LOGIN';\n    @Prop() showRememberMe: boolean = false;\n    @Prop() version: string;\n\n    @Event() doLogin: EventEmitter<ILoginDetails>;\n    @Event() languageSelectedParent: EventEmitter<string>;\n    @Event() rememberMeSelected: EventEmitter<boolean>;\n    @Event() passwordResetModalRequested: EventEmitter<boolean>;\n    @Event() magicLinkModalRequested: EventEmitter<boolean>;\n    @Event() advancedLoginRequested: EventEmitter<boolean>;\n\n    @State() pageWidthSize: number;\n    @State() language: string = 'EN';\n    @State() passwordInputChanged: boolean = false;\n    @State() inputFocused: boolean = false;\n    @State() deviceInputFocused: boolean = false;\n    @State() showSupport: boolean;\n    @State() showLeftPanel: boolean = true;\n\n    @Element() host: HTMLStencilElement;\n\n    private rememberMe: boolean = false;\n    private userEmail: string;\n    private userPassword: string;\n    private emailFocused: boolean = false;\n    private passwordFocused: boolean = false;\n    private fullWindowHeight: number = 0;\n    private loginContainerMobileHeight: number = 0;\n    private updateVideoSrcOnDidUpdate: boolean;\n    private loginContainerMobile: HTMLElement;\n    private loginVideoEl: HTMLVideoElement;\n    private emailInputEl: HTMLYooFormInputElement;\n    private passwordInputEl: HTMLYooFormInputElement;\n    private loginBtnEl: HTMLYooButtonElement;\n    private languageSelectorEl: HTMLDivElement;\n    private spaceFillEl: HTMLDivElement;\n    private videoHeaderContainerEl: HTMLDivElement;\n    private resizeListener: any;\n    private showHeaderFooterOnFocus: boolean = true;\n    private focusAnimation: LoginFocusAnimation;\n    private hideTitleAndFooterForIpadMini: boolean = false;\n    private outerContainerElement: HTMLDivElement;\n    private languageSelectorButtonElement: HTMLYooButtonElement;\n\n    @Watch('showLeftPanel')\n    onLeftPanelChanged(newValue: boolean) {\n        if (newValue) {\n            this.updateVideoSrcOnDidUpdate = true;\n        }\n    }\n\n    @Method()\n    setStatusBarColor(light: boolean) {\n        if (light) {\n            StatusBar.styleLightContent();\n        } else {\n            StatusBar.styleDefault();\n        }\n    }\n\n    componentWillLoad() {\n        if (isCordova()) {\n            disableKeyboardResize(Keyboard);\n            this.setStatusBarColor(true);\n        }\n    }\n\n    componentDidLoad() {\n        // Workaround for angular route bug \n        // where login through SSO and logout cause route to stop working\n        if (isIOS() && document) {\n            let oldMenuPage = querySelectorDeep(document as any, 'menu-page');\n            if (oldMenuPage && oldMenuPage.remove) {\n                oldMenuPage.remove();\n            }\n        }\n        this.resizePage();\n        this.resizeListener = debounce(this.resizePage, 500).bind(this);\n        window.addEventListener('resize', this.resizeListener);\n        // this.deviceHeight = window.innerHeight;\n        this.resizeLanguageSelectorWidth();\n        setTimeout(() => {\n            if (isCordova() && this.loginContainerMobile) {\n                this.loginContainerMobileHeight = getElementDimensions(this.loginContainerMobile).height;\n                this.loginContainerMobile.setAttribute('style', `height: ${this.loginContainerMobileHeight}px;`);\n            }\n        }, 1000);\n\n        if (this.videoHeaderContainerEl) {\n            this.focusAnimation = new LoginFocusAnimation();\n            this.focusAnimation.addContainer(this.videoHeaderContainerEl);\n        }\n        if (((isCordova() && isIOS()) || isSafari()) && this.outerContainerElement) {\n            this.outerContainerElement.style.height = `${window.innerHeight}px`;\n        }\n    }\n\n    componentDidUpdate() {\n        this.resizeLanguageSelectorWidth();\n        if (this.updateVideoSrcOnDidUpdate && this.loginVideoEl) {\n            this.loginVideoEl.src = this.videoBackgroundUrl;\n            this.loginVideoEl.play();\n            this.updateVideoSrcOnDidUpdate = false;\n        }\n        \n        if (((isCordova() && isIOS()) || isSafari()) && this.outerContainerElement) {\n            this.outerContainerElement.style.height = `${window.innerHeight}px`;\n        }\n    }\n\n    componentDidUnload() {\n        window.removeEventListener('resize', this.resizeListener);\n        if (isCordova()) {\n            enableKeyboardResize(Keyboard);\n            if (isIOS()) {\n                this.setStatusBarColor(false);\n            }\n        }\n    }\n\n    hasVideoBackground() {\n        return this.videoBackgroundUrl !== '';\n    }\n\n    hasLoginScreenClass() {\n        return isDarkTheme();\n    }\n\n    onAlertClosed() {\n        this.error = '';\n    }\n\n    onAlertActionSelected() {\n        this.error = '';\n        window.location.href = 'mailto:support@yoobic.com';\n    }\n\n    onRadioClicked(event) {\n        event.detail === 'checked' ? this.rememberMe = true : this.rememberMe = false;\n    }\n\n    onInputChanged(ev: CustomEvent<string>, type: string) {\n        this.validateLoginInputs();\n        if (type === 'email') {\n            this.userEmail = ev.detail;\n        } else if (type === 'password') {\n            this.userPassword = ev.detail;\n        }\n    }\n\n    onAdvancedLogin() {\n        this.advancedLoginRequested.emit(true);\n    }\n\n    onEnterPressed() {\n        this.validateLoginInputs();\n        this.onLogin();\n    }\n\n    validateLoginInputs() {\n        let isValidEmail = this.emailInputEl && this.emailInputEl.validity;\n        let isValidPassword = this.passwordInputEl && this.passwordInputEl.validity;\n        //TODO: what is happening in this line exactly, we are also passing disabled at the level of the component\n        if (this.loginBtnEl) {\n            this.loginBtnEl.disabled = (!(isValidEmail && isValidPassword)); // this.hasVideoBackground() ? false :}\n        }\n    }\n\n    onInputFocused(type: string) {\n        this.error = '';\n        type === 'password' ? (this.passwordFocused = true) : (this.emailFocused = true);\n        if (isCordova() && (!isTablet() || this.hideTitleAndFooterForIpadMini)) {\n            this.hideTitleAndFooter();\n        }\n        if (isIonic()) {\n            this.inputFocused = true;\n            if (this.focusAnimation) {\n                this.focusAnimation.playFocus();\n            }\n        }\n    }\n\n    onInputBlurred(type: string) {\n        this.validateLoginInputs();\n        if (isIonic()) {\n            type === 'password' ? (this.passwordFocused = false) : (this.emailFocused = false);\n            setTimeout(() => {\n                if (isCordova()) {\n                    this.hideTitleAndFooter();\n                }\n            }, 100);\n            this.inputFocused = false;\n            if (this.focusAnimation) {\n                this.focusAnimation.playBlur();\n            }\n        }\n    }\n\n    onPasswordIconClicked(ev: CustomEvent<string>) {\n        if (ev.detail === 'clear') { this.validateLoginInputs(); }\n    }\n\n    hideTitleAndFooter() {\n        if (this.emailFocused || this.passwordFocused) {\n            if (this.loginContainerMobile) {\n                let height: string = isIphone5() ? '75%' : '100%';\n                this.loginContainerMobile.setAttribute('style', `height: ${height};`);\n            }\n            this.deviceInputFocused = true;\n        } else {\n            if (this.loginContainerMobile) {\n                this.loginContainerMobile.setAttribute('style', `height: ${this.loginContainerMobileHeight}px;`);\n            }\n            this.deviceInputFocused = false;\n        }\n    }\n\n    resizeLanguageSelectorWidth() {\n        if (this.languageSelectorEl && this.languageSelectorEl.clientWidth) {\n            this.spaceFillEl.setAttribute('style', `width: ${this.languageSelectorEl.clientWidth}px`);\n        }\n        this.language = this.currentLanguage;\n    }\n\n    resizePage() {\n        if (isIonic()) {\n            this.fullWindowHeight = window.innerHeight > this.fullWindowHeight ? window.innerHeight : this.fullWindowHeight;\n        }\n        this.showLeftPanel = window.innerWidth > MIN_SCREEN_SIZE_LEFT_PANEL;\n        this.showHeaderFooterOnFocus = window.innerHeight > MINIMUM_SCREEN_SIZE_TO_SHOW_HEADER;\n        this.hideTitleAndFooterForIpadMini = window.innerHeight < IPAD_MINI_SCREEN_HEIGHT && isIOS();\n    }\n\n    onLogin() {\n        if (this.userEmail && this.userPassword && this.loginBtnEl.disabled === false) {\n            let inputs: Array<HTMLElement> = querySelectorAllDeep(this.host, 'input');\n            if (inputs && inputs.forEach) {\n                inputs.forEach((el: HTMLInputElement) => el && el.blur && el.blur());\n            }\n            let loginDetails: ILoginDetails = { username: this.userEmail, password: this.userPassword };\n            this.doLogin.emit(loginDetails);\n            this.rememberMeSelected.emit(this.rememberMe);\n        }\n    }\n\n    onForgotPassword() {\n        isIonic() ? (\n            this.presentActionSheet()\n        ) :\n            this.passwordResetModalRequested.emit(true);\n    }\n\n    presentActionSheet() {\n        showActionSheet([\n            { text: translate(this.resetPasswordButtonText), handler: () => this.passwordResetModalRequested.emit(true) },\n            { text: translate(this.magicLinkButtonText), handler: () => this.magicLinkModalRequested.emit(true) }\n        ]);\n    }\n\n    showLanguageModal() {\n        const modalTopPadding = 5;\n        let topPositionLanguageSelectorButton = Math.floor(this.languageSelectorButtonElement ? this.languageSelectorButtonElement.getBoundingClientRect().bottom : 0);\n        let topPositionLanguageSelectorModal = Math.ceil(topPositionLanguageSelectorButton) + modalTopPadding;\n        let languageSelectorEl = document.createElement('yoo-language-selector') as HTMLYooLanguageSelectorElement;\n        languageSelectorEl.currentLanguage = this.currentLanguage;\n        languageSelectorEl.languages = this.languages;\n        languageSelectorEl.topPosition = topPositionLanguageSelectorModal;\n        showModal(languageSelectorEl, null, null, 'fadeEnterAnimation', 'fadeLeaveAnimation').then(ret => {\n            if (ret && ret.data) {\n                this.language = ret.data;\n                this.languageSelectedParent.emit(ret.data);\n            }\n            languageSelectorEl = null;\n        });\n    }\n\n    getVideoBackgroundClasses(): CssClassMap {\n        if (this.hasVideoBackground() && !isWeb()) {\n            return {\n                'no-border': true,\n                'translucent': true\n            };\n        }\n    }\n\n    renderLoginForm(): JSX.Element {\n        let newClass = {};\n        newClass['link-' + (this.hasVideoBackground() && !isWeb() ? 'translucent' : ('transparent-' + this.borderClass))] = true;\n        return [\n            <div ref={el => this.loginContainerMobile = el as HTMLElement} class={{\n                'login-container-mobile': isIonic(),\n                'login-container': !isIonic(),\n                'iphone-se-focus': this.inputFocused && isIphoneSE()\n            }}>\n                {isIonic() ? null :\n                    [<div class=\"login-title\">\n                        {translate(this.webLoginFormTitle)}\n                    </div>,\n                    <div class=\"login-subtitle\">\n                        {translate(this.webLoginFormSubtitle)}\n                    </div>]}\n                <yoo-form-input-container class={this.hasLoginScreenClass() ? 'login-screen' : ''} field={{ title: translate(this.emailLabel) }} required={true}>\n                    <yoo-form-input\n                        ref={el => this.emailInputEl = el as HTMLYooFormInputElement}\n                        // id used by e2e selector\n                        id=\"email-input\"\n                        type=\"email\"\n                        class={this.getVideoBackgroundClasses()}\n                        validators={[{ name: 'email' }, { name: 'required' }]} uiValidation={{ valid: false, invalid: true }}\n                        onInputChanged={(event) => this.onInputChanged(event, 'email')}\n                        onInputFocused={() => this.onInputFocused('email')}\n                        onInputBlurred={() => this.onInputBlurred('email')}\n                        onEnterPressed={() => this.onEnterPressed()}>\n                    </yoo-form-input>\n                </yoo-form-input-container>\n                <div class=\"password-container\">\n                    <yoo-form-input-container class={this.hasLoginScreenClass() ? 'login-screen' : ''} field={{ title: translate(this.passwordLabel) }} required={true}>\n                        <yoo-form-input\n                            ref={el => this.passwordInputEl = el as HTMLYooFormInputElement}\n                            id=\"password-input\"\n                            type=\"password\"\n                            showPasswordToggle={true}\n                            validators={[{ name: 'required' }]} uiValidation={{ valid: false, invalid: true }}\n                            class={this.getVideoBackgroundClasses()}\n                            onInputChanged={(event) => this.onInputChanged(event, 'password')}\n                            onInputFocused={() => this.onInputFocused('password')}\n                            onInputBlurred={() => this.onInputBlurred('password')}\n                            onIconClicked={(ev) => this.onPasswordIconClicked(ev)}\n                            onEnterPressed={() => this.onEnterPressed()}>\n                        </yoo-form-input>\n                    </yoo-form-input-container>\n                </div>\n                <div class={'inner-container' + (isIonic() ? ' mobile' : '')}>\n                    <div class=\"radio\">\n                        {\n                            this.showRememberMe &&\n                            <yoo-form-radio text={translate(this.rememberMeText)} class={'stable ' + this.borderClass}\n                                onRadioClicked={(event) => this.onRadioClicked(event)}>\n                            </yoo-form-radio>\n                        }\n                    </div>\n                    <yoo-button id=\"forgot-password\"\n                        text={translate(this.forgotPasswordText)}\n                        onClick={() => this.onForgotPassword()}\n                        class={{\n                            ...newClass,\n                            'medium': isIonic(),\n                            'login-screen': this.hasLoginScreenClass(),\n                            'no-min-width': true\n                        }}>\n                    </yoo-button>\n                </div>\n                <div class={'login-button ' + (isCordova() ? 'device-padding' : '')}>\n                    <yoo-button\n                        ref={el => this.loginBtnEl = el as HTMLYooButtonElement}\n                        id=\"login-btn\"\n                        disabled={!this.userEmail || !this.userPassword}\n                        text={translate(this.loginButtonText)}\n                        class={(isIonic() ? 'large full-width ' : 'full-width ') + (this.hasLoginScreenClass() ? 'login-screen ' : '') + (this.buttonClass || '')}\n                        //disabled={!this.hasVideoBackground()} \n                        onClick={() => this.onLogin()}></yoo-button>\n                </div>\n                {isIonic() && this.renderPoweredBy()}\n            </div>\n        ];\n    }\n\n    renderHeaderVideo(): JSX.Element {\n        if (!this.hasVideoBackground() || isWeb() || ((isIphone5() || isIphoneSE()) && this.error) || (this.deviceInputFocused && isAndroid() && !this.showHeaderFooterOnFocus)) {\n            return null;\n        }\n        if (getAppContext()['boost']) {\n            this.videoHeaderIcon = './assets/logo/boost_portrait_light.svg';\n        } else {\n            this.videoHeaderIcon = './assets/logo/operations_portrait_light.svg';\n        }\n        return (<div\n            ref={el => this.videoHeaderContainerEl = el as HTMLDivElement}\n            class=\"video-header-container-mobile\"\n        >\n            <img class=\"logo\" src={this.videoHeaderIcon} height={'120'} alt=\"YOOBIC Logo\" />\n            <div class={{\n                'text': true,\n                'iphone-5': isIphone5() || isIphoneSE()\n            }}>\n                {translate('GLADTOSEEYOU')}\n            </div>\n        </div>);\n    }\n\n    renderLanguageSelector(): JSX.Element {\n        return (\n            <yoo-button id=\"language-selector\"\n                ref={el => this.languageSelectorButtonElement = el as HTMLYooButtonElement}\n                class={{\n                    'clear': true,\n                    'squared': true,\n                    'small': true,\n                    'no-shadow': true,\n                    'login-screen': this.hasLoginScreenClass(),\n                    'translucent': this.hasVideoBackground() && !isWeb()\n                }}\n                onClick={() => this.showLanguageModal()}\n                text={this.currentLanguage}\n                icon=\"yo-down\"\n                translateText={false}>\n            </yoo-button>\n        );\n    }\n\n    renderPoweredBy(): JSX.Element {\n        if (!((this.error || this.inputFocused) && isCordova() && isAndroid())) {\n            return [\n                <div class=\"powered-by\">\n                    {translate(this.leftPanelFooterText)}\n                    <div class=\"powered-img\">\n                        <img src={isIonic() || !this.showLeftPanel ? './assets/logo/yoobic_simple_grey.svg' : './assets/logo/yoobic_simple_white.svg'} height=\"12.8\" />\n                    </div>\n                    <div class=\"yoobic-text\">\n                        YOOBIC\n                </div>\n                </div>,\n                <div class=\"powered-by version\">\n                    v{this.version}\n                </div>\n\n            ];\n        }\n\n    }\n\n    renderFooter(): JSX.Element {\n        return (\n            isIonic() ? <yoo-button text={translate('ADVANCEDLOGIN')} onClick={() => this.onAdvancedLogin()} class={'block ' + (this.hasLoginScreenClass() ? 'login-screen ' : '') + (this.hasVideoBackground() && !isWeb() ? 'transparent' : 'stable')}></yoo-button>\n                : this.renderPoweredBy()\n        );\n    }\n\n    renderVideo(): JSX.Element {\n        return <video\n            ref={el => this.loginVideoEl = el as HTMLVideoElement}\n            class={{ 'android': isAndroid() }}\n            src={this.videoBackgroundUrl}\n            muted\n            autoplay\n            loop\n            playsinline\n            webkit-playsinline\n        />;\n    }\n\n    renderHeader(): JSX.Element {\n        return <div class=\"header\">\n            {isIonic() && <div class=\"space-fill\" ref={el => this.spaceFillEl = el as HTMLDivElement} ></div>}\n            <div class=\"logo\">\n                <img src={this.leftPanelWebHeaderIcon} height={'32'} alt=\"YOOBIC Logo\" />\n            </div>\n        </div>;\n    }\n\n    renderPanelBody(type?: string): JSX.Element {\n        if (type === 'leftPanel') {\n            return <div class=\"left-body\">\n                <div class=\"title-container\">\n                    {this.webTitleText}\n                </div>\n                {this.webSubtitleText.map((text) =>\n                    <div class=\"subtitle-container\">\n                        {text}\n                    </div>\n                )}\n            </div>;\n        }\n        return '';\n    }\n\n    renderLeftPanel(): JSX.Element {\n        let backStyle;\n        if (!this.hasVideoBackground() && !isWeb()) {\n            backStyle = { backgroundImage: `url(${this.backgroundSrc})` };\n        }\n        return (\n            <div class=\"left-panel\">\n                {this.backgroundSrc && backStyle ?\n                    <div class=\"background\" style={backStyle}></div> : (this.hasVideoBackground() ? this.renderVideo() : null)\n                }\n                <div class={'background-overlay ' + 'bg-' + (this.backgroundColor || 'dark')}></div>\n                <div class=\"content-container\">\n                    {this.renderHeader()}\n                    {this.renderPanelBody('leftPanel')}\n                    <div class=\"footer\">\n                        {this.renderFooter()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderErrorBanner(): JSX.Element {\n        return <yoo-banner id=\"error-alert\" animationName=\"sticky_up\" class=\"danger embedded centered header\"\n            text={this.error}\n            closeable={!isIonic()}\n            link={!isIonic() ? `Problems? We're here to help` : ''}\n            onAlertActionSelected={() => this.onAlertActionSelected()}\n            onAlertClosed={() => this.onAlertClosed()}>\n        </yoo-banner>;\n    }\n\n    renderRightPanel(): JSX.Element {\n        return (\n            <div class={{\n                'right-panel': true,\n                'mobile': isIonic(),\n                'ios': isCordova() && isIOS(),\n                'video-background': this.hasVideoBackground() && !isWeb()\n            }} justify-content=\"flex-start\">\n                {this.hasVideoBackground() && !isWeb() && this.renderVideo()}\n                {this.error && this.renderErrorBanner()}\n                <div class=\"right-panel-content\" justify-content=\"space-between\">\n                    <div id=\"header\" class={{\n                        'header': true,\n                        'mobile': isIonic() || !this.showLeftPanel,\n                        'ios': isCordova() && isIOS(),\n                        'iphone-x': isIphoneX(),\n                        'no-padding': + this.error && isIonic()\n                    }}>\n                        {(isIonic() || !this.showLeftPanel ? [\n                            <div class=\"space-fill\"></div>,\n                            <div class=\"logo\">\n                                {this.hasVideoBackground() && !isWeb() ? null : <img src={this.leftPanelMobileHeaderIcon} height={'25'} alt=\"YOOBIC Logo\" />}\n                            </div>,\n                            <div class={'language-container mobile'}>\n                                {this.renderLanguageSelector()}\n                            </div>\n                        ] :\n                            (this.renderLanguageSelector()))}\n                    </div>\n                    <div class={{ 'content': true, 'mobile': isIonic(), 'small-android': isAndroid() && !this.showHeaderFooterOnFocus }} justify-content=\"center\">\n                        {this.renderHeaderVideo()}\n                        {this.renderLoginForm()}\n                    </div>\n                    {<div class={{\n                        'footer': true,\n                        'web': isWeb(),\n                        'iphone-x': isIphoneX()\n                    }}>\n                        {isIonic() || !this.showLeftPanel ? this.renderFooter() :\n                            <yoo-button text={translate('ADVANCEDLOGIN')} onClick={() => this.onAdvancedLogin()}\n                                class={' ' + (this.hasLoginScreenClass() ? 'login-screen ' : '') + 'link-transparent-' + (this.borderClass) + (isIphoneX() ? ' iphone-x-padding' : '')}></yoo-button>}\n                    </div>}\n                </div>\n            </div>\n        );\n    }\n\n    renderLoading(): JSX.Element {\n        return <yoo-loader class=\"absolute large backdrop\" ></yoo-loader>;\n    }\n\n    render(): JSX.Element {\n        return (\n            <div ref={el => this.outerContainerElement = el as HTMLDivElement} class=\"outer-container\" >\n                {this.loading && this.renderLoading()}\n                {isWeb() && this.showLeftPanel && this.renderLeftPanel()}\n                {this.renderRightPanel()}\n            </div>\n        );\n    }\n}\n",/Users/benyoobic/Documents/playground/storybook-to-json/looping-test/src/components/about-component/about.stories.tsx,/Users/benyoobic/Documents/playground/storybook-to-json/looping-test/src/components/about-component/about.tsx,/Users/benyoobic/Documents/playground/storybook-to-json/looping-test/src/components/hello-component/hello-component.tsx,/Users/benyoobic/Documents/playground/storybook-to-json/looping-test/src/components/login/login.stories.tsx,/Users/benyoobic/Documents/playground/storybook-to-json/looping-test/src/components/login/login.tsx,/Users/benyoobic/Documents/playground/storybook-to-json/looping-test/src/components/my-component/my-component.stories.tsx,/Users/benyoobic/Documents/playground/storybook-to-json/looping-test/src/components/my-component/my-component.tsx]